// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//kweku frimpong @kweku-dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Programme {
  id       Int        @id @default(autoincrement())
  Schedule Schedule[]
  name     String     @unique
  slug     String     @unique
}

model Course {
  id       Int        @id @default(autoincrement())
  Schedule Schedule[]
  code     String     @unique
  name     String
  slug     String     @unique
}

model Schedule {
  id           Int        @id @default(autoincrement())
  course       Course     @relation(fields: [courseId], references: [id])
  courseId     Int
  day          Int
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId Int
  level        Int
  programme    Programme  @relation(fields: [programmeId], references: [id])
  programmeId  Int
  semester     Int
  timeEnd      Int
  timeStart    Int // seconds from midnight
  year         String // xxxx-xxxx
  location     String
}

model Instructor {
  id       Int        @id @default(autoincrement())
  name     String
  Schedule Schedule[]
}

model User {
  id                     Int                      @id @default(autoincrement())
  username               String                   @unique
  email                  String                   @unique
  AuthCredential         AuthCredential?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  verified               Boolean                  @default(false)
  role                   String                   @default("common")
  bio                    String?
  PasswordResetRequest   PasswordResetRequest[]
  Post                   Post[]
  Vote                   Vote[]
  Media                  Media[]
  EventItem              EventItem[]
  Resource               Repository[]
  NotificationSubscriber NotificationSubscriber[]
  Notification           Notification[]
  Community              Community[]
  CommunityMember        CommunityMember[]
  SellerProfile          SellerProfile[]
}

model AuthCredential {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
  password String
}

model PasswordResetRequest {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model EmailVerificationRequest {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  createdAt DateTime @default(now())
}

model Post {
  id            Int      @id @default(autoincrement())
  content       String
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  parent        Post?    @relation("Parent", fields: [parentId], references: [id])
  parentId      Int?
  comments      Post[]   @relation("Parent")
  quote         Post?    @relation("Quote", fields: [quoteId], references: [id])
  quotedBy      Post[]   @relation("Quote")
  quoteId       Int?
  upvotes       Int      @default(0)
  downvotes     Int      @default(0)
  people        Int      @default(0)
  commentsCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  media         Media[]
  Vote          Vote[]
  deleted       Boolean  @default(false)

  // JSON stringified array of tags
  tags String @default("")

  // To show the lineage of the post. This is relevant for comments. Eg. for a
  // comment on a second level, the path will be 23/40. Where 23 is the id of the
  // OP, and 40 is the id of the comment under it.
  path        String?
  community   Community? @relation(fields: [communityId], references: [id])
  communityId Int?
}

model Vote {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  up        Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@index([postId])
}

model Media {
  id          Int          @id @default(autoincrement())
  filename    String
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  thumbnail   String?
  url         String
  contentType String
  size        Int
  duration    Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Post        Post?        @relation(fields: [postId], references: [id])
  postId      Int?
  EventItem   EventItem[]
  Resource    Repository[]
}

model EventItem {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  title            String
  description      String
  shortDescription String?
  date             DateTime
  startTime        Int
  endTime          Int?
  venue            String
  mapsLink         String?
  eventLink        String?
  poster           Media?   @relation(fields: [posterId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  posterId         Int?
  userId           Int
}

model Repository {
  id        Int      @id @default(autoincrement())
  media     Media    @relation(fields: [mediaId], references: [id])
  mediaId   Int
  user      User     @relation(fields: [userId], references: [id])
  tags      String   @default("") // JSON stringified array of tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
}

model Notification {
  id                     Int                      @id @default(autoincrement())
  message                String
  actorId                Int
  entityId               Int
  entityType             String
  createdAt              DateTime                 @default(now())
  updateAt               DateTime                 @updatedAt
  NotificationSubscriber NotificationSubscriber[]
  actor                  User                     @relation(fields: [actorId], references: [id])
}

model NotificationSubscriber {
  id             Int          @id @default(autoincrement())
  notificationId Int
  userId         Int
  read           Boolean      @default(false)
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])
}

model Community {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  handle          String            @unique
  description     String
  modPhone        String
  status          String // "pending-approval", "activated", "disabled"
  members         Int               @default(0)
  createdBy       User              @relation(fields: [createdById], references: [id])
  createdById     Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  CommunityMember CommunityMember[]
  Post            Post[]
}

model CommunityMember {
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  role        String    @default("common") // moderator, common
  createdAt   DateTime  @default(now())

  @@id([userId, communityId])
}

model SellerProfile {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  phone        String
  whatsapp     String?
  instagram    String?
  snapchat     String?
  businessName String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Product      Product[]
}

model Category {
  id      Int       @id @default(autoincrement())
  title   String    @unique
  Product Product[]
}

model Product {
  id              Int           @id @default(autoincrement())
  name            String
  category        Category      @relation(fields: [categoryId], references: [id])
  price           Decimal
  status          String        @default("available") // hidden | deleted
  description     String?
  seller          SellerProfile @relation(fields: [sellerProfileId], references: [id])
  images          String // JSON array of media
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  categoryId      Int
  sellerProfileId Int
}